var global = this;
(function () {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  var Node =
  /*#__PURE__*/
  function () {
    function Node(data, parent) {
      var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

      _classCallCheck(this, Node);

      this.data = data;
      this.parent = parent;
      this.children = children; // 默认 return this
    }

    _createClass(Node, [{
      key: "insert",
      value: function insert(index, node) {
        // 为了性能不判断children的长度是否大雨index
        this.children.split(index, 0, node);
      }
    }, {
      key: "before",
      value: function before(node) {
        this.children.unshift(node);
      }
    }, {
      key: "after",
      value: function after(node) {
        this.children.push(node);
      } //节点个数

    }], [{
      key: "count",
      // 重新设置节点个数
      value: function count(n) {
        Node.total += n;
      }
    }]);

    return Node;
  }();

  _defineProperty(Node, "total", 0);

  var BinaryNode =
  /*#__PURE__*/
  function (_Node) {
    _inherits(BinaryNode, _Node);

    function BinaryNode(data, parent, children) {
      var _this;

      _classCallCheck(this, BinaryNode);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(BinaryNode).call(this, data, parent, children));
      _this.left = children[0];
      _this.right = children[1];
      return _this;
    } // 前序遍历


    _createClass(BinaryNode, null, [{
      key: "preorder",
      value: function preorder(node) {} // 中序遍历

    }, {
      key: "inorder",
      value: function inorder(node) {
        if (node.left) {
          BinaryNode.inorder(node.left);
        }

        BinaryNode.callback(node);

        if (node.right) {
          BinaryNode.inorder(node.right);
        }
      } // 后序遍历

    }, {
      key: "postorder",
      value: function postorder(node) {}
    }, {
      key: "callback",
      value: function callback(node) {}
    }]);

    return BinaryNode;
  }(Node);

  // render只能是拼接虚拟到字符串，不要真到渲染，不然会影响性能
  var Node$1 =
  /*#__PURE__*/
  function () {
    function Node(profile, position) {
      _classCallCheck(this, Node);

      // const { data, father, mother, children, sublings, partners, sort, gender,level } = profile;
      // const {x,y} = position
      Object.assign(this, profile);
      this.x = position.x;
      this.y = position.y;
    }

    _createClass(Node, [{
      key: "insert",
      value: function insert(index, node) {
        // 为了性能不判断children的长度是否大雨index
        this.children.split(index, 0, node);
      }
    }, {
      key: "before",
      value: function before(node) {
        this.children.unshift(node);
      }
    }, {
      key: "after",
      value: function after(node) {
        this.children.push(node);
      } //在内存中生成可以渲染成界面到字符串，两种方式，一种是html字符串,一种是canvas

    }, {
      key: "create",
      value: function create() {} // 渲染

    }, {
      key: "render",
      value: function render() {} // 节点个数

    }], [{
      key: "count",
      // 重新设置节点个数
      value: function count(n) {
        Node.total += n;
      }
    }]);

    return Node;
  }();

  _defineProperty(Node$1, "total", 0);

  var Line =
  /*#__PURE__*/
  function () {
    function Line(startPosition, endPosition, style) {
      _classCallCheck(this, Line);

      // const { x:startX,y:startY } = startPosition;
      // const { x:endX,y:endY } = endPosition;
      // const { color,size } = style;
      this.startX = startPosition.x;
      this.startY = startPosition.y;
      this.endX = endPosition.x;
      this.endY = endPosition.y;
      this.color = style.color;
      this.size = style.color;
    } // 在内存中生成可以渲染成界面到字符串，两种方式，一种是html字符串,一种是canvas


    _createClass(Line, [{
      key: "create",
      value: function create() {} // 渲染

    }, {
      key: "render",
      value: function render() {} // 线条个数

    }], [{
      key: "count",
      // 重新设置线条个数
      value: function count(n) {
        Line.total += n;
      }
    }]);

    return Line;
  }();

  _defineProperty(Line, "total", 0);

  var Tree =
  /*#__PURE__*/
  function () {
    function Tree(nodes, lines) {
      _classCallCheck(this, Tree);

      this.nodes = nodes;
      this.lines = lines;
    } // 在内存中生成可以渲染成界面到字符串，两种方式，一种是html字符串,一种是canvas


    _createClass(Tree, [{
      key: "create",
      value: function create() {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var node = _step.value;
            node.create();
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = lines[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var line = _step2.value;
            line.create();
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      } // 渲染

    }, {
      key: "render",
      value: function render() {}
    }]);

    return Tree;
  }();

  var Node$2 =
  /*#__PURE__*/
  function () {
    function Node(data, parent) {
      var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

      _classCallCheck(this, Node);

      this.data = data;
      this.parent = parent;
      this.children = children; // 默认 return this
    }

    _createClass(Node, [{
      key: "insert",
      value: function insert(index, node) {
        // 为了性能不判断children的长度是否大雨index
        this.children.split(index, 0, node);
      }
    }, {
      key: "before",
      value: function before(node) {
        this.children.unshift(node);
      }
    }, {
      key: "after",
      value: function after(node) {
        this.children.push(node);
      } //节点个数

    }], [{
      key: "count",
      // 重新设置节点个数
      value: function count(n) {
        Node.total += n;
      }
    }]);

    return Node;
  }();

  _defineProperty(Node$2, "total", 0);

  var BinaryNode$1 =
  /*#__PURE__*/
  function (_Node) {
    _inherits(BinaryNode, _Node);

    function BinaryNode(data, parent, children) {
      var _this;

      _classCallCheck(this, BinaryNode);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(BinaryNode).call(this, data, parent, children));
      _this.left = children[0];
      _this.right = children[1];
      return _this;
    } // 前序遍历


    _createClass(BinaryNode, null, [{
      key: "preorder",
      value: function preorder(node) {} // 中序遍历

    }, {
      key: "inorder",
      value: function inorder(node) {
        if (node.left) {
          BinaryNode.inorder(node.left);
        }

        BinaryNode.callback(node);

        if (node.right) {
          BinaryNode.inorder(node.right);
        }
      } // 后序遍历

    }, {
      key: "postorder",
      value: function postorder(node) {}
    }, {
      key: "callback",
      value: function callback(node) {}
    }]);

    return BinaryNode;
  }(Node$2);

  var treenode = Node({
    text: 'a'
  }, null, null);
  var familynode = Node$1({
    text: 'a'
  }, null, null);
  var netnode = Node$2({
    text: 'a'
  }, null, null);

}());
