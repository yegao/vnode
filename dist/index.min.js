var global = this;
(function () {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var Node =
  /*#__PURE__*/
  function () {
    function Node(data) {
      var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      _classCallCheck(this, Node);

      this.data = data;
      this.children = children; // 默认 return this
    }

    _createClass(Node, [{
      key: "insert",
      value: function insert(index, node) {
        // 为了性能不判断children的长度是否大雨index
        this.children.split(index, 0, node);
      }
    }, {
      key: "before",
      value: function before(node) {
        this.children.unshift(node);
      }
    }, {
      key: "after",
      value: function after(node) {
        this.children.push(node);
      }
    }], [{
      key: "count",
      value: function count(n) {
        Node.total += n;
      }
    }]);

    return Node;
  }();

  _defineProperty(Node, "total", 0);

  var node = Node({
    text: 'a'
  }, null, null);
  console.log(node);

}());
